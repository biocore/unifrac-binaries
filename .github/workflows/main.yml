name: unifrac-binaries CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, linux-gpu-cuda]
        offload: [cpu, acc, ompgpu]
        exclude:
          - os: linux-gpu-cuda
            offload: cpu
          - os: macos-14
            offload: acc
          - os: macos-14
            offload: ompgpu
          - os: macos-13
            offload: acc
          - os: macos-13
            offload: ompgpu
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: "latest"
        auto-update-conda: true
    - name: Install 
      shell: bash -l {0}
      run: |
        df -h .
        if [[ "$(uname -s)" == "Linux" ]];
        then
          conda create -q --yes --strict-channel-priority -n unifrac -c conda-forge gxx_linux-64 hdf5 lz4 zlib hdf5-static scikit-bio-binaries make curl
        else
         if [[ "x`conda info |awk '/platform/{print $3}'`" == "xosx-64" ]];
         then
          conda create -q --yes --strict-channel-priority -n unifrac -c conda-forge clangxx_osx-64 hdf5 lz4 hdf5-static scikit-bio-binaries make curl
         else
          conda create -q --yes --strict-channel-priority -n unifrac -c conda-forge clangxx_osx-arm64 hdf5 lz4 hdf5-static scikit-bio-binaries make curl
         fi
        fi 
        conda clean --yes -t
        df -h .
        conda activate unifrac
        echo "$(uname -s)"
        if [[ "$(uname -s)" == "Linux" ]];
        then
          which x86_64-conda-linux-gnu-gcc
          x86_64-conda-linux-gnu-gcc -v
          x86_64-conda-linux-gnu-g++ -v
        else
          which clang
          clang -v
        fi
        which h5c++
        export PERFORMING_CONDA_BUILD=True
        export BUILD_NV_OFFLOAD=${{ matrix.offload }}
        if [[ "$(uname -s)" == "Linux" ]] && [[ "x${BUILD_NV_OFFLOAD}" != "xcpu" ]];
        then
          # install PGI locally
          ./scripts/install_hpc_sdk.sh </dev/null
          # also install the AMD compiler
          ./scripts/install_amd_clang.sh </dev/null
          # get the compilers in the path and set NV_CXX and AMD_CXX
          . ./setup_nv_compiler.sh
          . ./setup_amd_compiler.sh
        fi
        # else, no NV_CXX or AMD_CXX in the env, so no GPU build
        df -h .
        echo "======= begin env ====="
        env
        echo "=======  end env  ====="
        # all == build (shlib,bins,tests) and install
        make clean && make clean_install && make all
        df -h .
    - name: Tests
      shell: bash -l {0}
      run: |
        conda activate unifrac
        if [[ "$(uname -s)" == "Linux" ]];
        then
           lscpu
        fi
        # keep it low for runs in containers
        # and a weird number to potentially catch potential bugs
        export OMP_NUM_THREADS=3
        # diagnostic messages for debugging, if needed
        export UNIFRAC_CPU_INFO=Y
        export UNIFRAC_GPU_INFO=Y
        pushd src
        ./test_su
        ./test_api
        ./test_ska
        ./test_su_api
        popd
        pushd test
        ./capi_test 1
        ./capi_inmem_test 1
        # explicitly check that we do not have hdf5 dependencies
        if [[ "$(uname -s)" == "Linux" ]];
        then
          ldd ./capi_test |awk 'BEGIN{a=0}/hdf/{a=a+1;print $0}END{if (a==0) {print "No dynamic hdf5 found"} else {exit 2}}'
        else
          otool -L ./capi_test|awk 'BEGIN{a=0}/hdf/{a=a+1;print $0}END{if (a==0) {print "No dynamic hdf5 found"} else {exit 2}}'
        fi
        popd
        pushd src/testdata
        conda install --yes -c conda-forge h5py python=3.11
        ./validation_tests.sh 
        popd
        # finally, test rapi, too
        pushd src
        if [[ "$(uname -s)" == "Linux" ]]; 
        then
          make clean
          rm -f ~/.R/Makevars
          conda install -q --yes  --strict-channel-priority -c conda-forge r-base
          unset CXXFLAGS
          unset CFLAGS
          unset DEBUG_CXXFLAGS
          unset DEBUG_CFLAGS
          # the r-base package has a broken dependency
          ln -s $CONDA_PREFIX/lib/libreadline.so $CONDA_PREFIX/lib/libreadline.so.6
          R -e 'install.packages("Rcpp", repos="http://lib.stat.cmu.edu/R/CRAN/")'
          make rapi_test
        fi
        popd
    - name: Sanity checks
      shell: bash -l {0}
      run: |
        conda activate unifrac
        # keep it low for runs in containers
        export OMP_NUM_THREADS=2
        pushd ci
        ./crawford_test.sh
        popd
